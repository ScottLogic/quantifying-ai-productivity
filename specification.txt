# todo list
[
    {
        "uuid": "f360ba09-4682-448b-b32f-0a9e538502fa",
        "name": "Walk the dog",
        "description": "Walk the dog for forty five minutes",
        "created": "2023-06-23T09:30:00Z",
        "completed": null,
        "complete": false
    },
    {
        "uuid": "fd5ff9df-f194-4c6e-966a-71b38f95e14f",
        "name": "Mow the lawn",
        "description": "Mow the lawn in the back garden",
        "created": "2023-06-23T09:00:00Z",
        "completed": null,
        "complete": false
    },
    {
        "uuid": "5c3ec8bc-6099-4cd5-b6da-8e2956db3a34",
        "name": "Test generative AI",
        "description": "Use generative AI technology to write a simple web service",
        "created": "2023-06-23T09:00:00Z",
        "completed": null,
        "complete": false
    }
]


# add query string parameter `complete` (which can be `true` or `false`) to the GET endpoint at `http://localhost:8080/todo`

# when `complete == true`, GET requests to `http://localhost:8080/todo?complete=true` will return a todo list containing only task objects with `"complete": true`

# when `complete == false`, GET requests to `http://localhost:8080/todo?complete=false` will return a todo list containing only task objects with `"complete": null` or `"complete": false`


# add an endpoint with a `uuid` path parameter, GET `http://localhost:8080/todo/{uuid}` will return the task object with `"uuid": "{uuid}"`

# when no task object has a matching "uuid", GET `http://localhost:8080/todo/{uuid}` will return the unknown task object

# unknown task object
{
    "uuid": "00000000-0000-0000-0000-000000000000",
    "name": "Unknown Task",
    "description": "Unknown Task",
    "created": "1970-01-01T00:00:00.000Z",
    "completed": null,
    "complete": false
}

# when the `uuid` path parameter is not a valid UUID, GET `http://localhost:8080/todo/{uuid}` will respond with a 400 HTTP status code and an invalid uuid response body

# invalid uuid response body
{
    "timestamp": "2023-06-27T12:32:05.590Z",
    "status": 400,
    "error": "invalid uuid",
    "path": "/todo/{uuid}"
}

# add an endpoint with a `uuid` path parameter to mark a task object complete, PUT `http://localhost:8080/todo/completed/{uuid}`, this sets `"complete": true` and `"complete": {timestamp}` on the task object with matching uuid

# marked completed response body
{
    "success": true,
    "message": "This task has now been completed."
}

# when the matching task object has `"complete": true`, PUT `http://localhost:8080/todo/completed/{uuid}` will respond with a 200 HTTP status code and a task already marked complete response body

# task already marked complete response body
{
    "success": false,
    "message": "Task already marked complete."
}

# when no task object has a matching "uuid", PUT `http://localhost:8080/todo/completed/{uuid}` will respond with a 200 HTTP status code and a task not found response body

# task not found response body
{
    "success": false,
    "message": "Task not found."
}

# when the `uuid` path parameter is not a valid UUID, PUT `http://localhost:8080/todo/completed/{uuid}` will respond with a 400 HTTP status code and an invalid uuid response body

# invalid uuid response body
{
    "timestamp": "2023-06-26T12:32:05.590Z",
    "status": 400,
    "error": "invalid uuid",
    "path": "/todo/completed/{uuid}"
}

# add an endpoint with query parameters `name` and `description`, POST `http://localhost:8080/todo/addTask?name={TaskName}&description={TaskDescription}, this creates a new task object with a new generated uuid and responds with a 201 HTTP status code and a new task response body

# new task
{
    "uuid": "{uuid}",
    "name": "{TaskName}",
    "description": "{TaskDescription}",
    "created": "2023-07-31T12:32:05.590Z",
    "completed": null,
    "complete": false
}

# new task response body
{
    "taskId": "{uuid}",
    "message": "Task {TaskName} added successfully."
}

# query parameters `name` and `description` are both required with POST `http://localhost:8080/todo/addTask?name={TaskName}&description={TaskDescription}
# if `name` or `description` is missing the server responds with a 400 HTTP status code and an add task bad request response body

# add task bad request response body
{
    "timestamp": "2023-07-14T12:32:05.590Z",
    "status": 400,
    "error": "Bad Request",
    "path": "/todo/addTask?name={TaskName}"
}